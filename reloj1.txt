;*Programa DEMO: Encender y apagar un LED con con un retardo

;*******************************************************************
;* This stationery serves as the framework for a user application. *
;* For a more comprehensive program that demonstrates the more     *
;* advanced functionality of this processor, please see the        *
;* demonstration applications, located in the examples             *
;* subdirectory of the "Freescale CodeWarrior for HC08" program    *
;* directory.                                                      *
;*******************************************************************

; Include derivative-specific definitions
            INCLUDE 'derivative.inc'
; export symbols
            XDEF _Startup, main
            ; we export both '_Startup' and 'main' as symbols. Either can
            ; be referenced in the linker .prm file or from C/C++ later on

            XREF __SEG_END_SSTACK   ; symbol defined by the linker for the end of the stack
; variable/data section
MY_ZEROPAGE: SECTION  SHORT         ; Insert here your data definition
ciclo		ds 1			    ; defino una variable para el usar con el retardo
min0		ds 1
min1		ds 1
seg0		ds 1
seg1		ds 1

; code section
MyCode:     SECTION
main:
_Startup:
            LDHX   #__SEG_END_SSTACK ; initialize the stack pointer
            TXS
            CLI                     ; enable interrupts
			
			LDA #%11111111		; todos los bits del PTB como salidas
            STA PTBDD
            STA PTBPE  ; no se toca

mainLoop:
            ; Insert your code here
            	NOP
reset       LDA #$0
            STA seg
            LDA #$0
            STA min
           
; pulsador activado?           
          
incseg      LDA seg
	        DAA 
	        AND #$F
           	; paso a display 0
		    LDA seg
		    AND #$F0
		    NSA
		  ; paso a display 1
			LDA seg
			INCA
			JSR delay
      
            CMPA #$60 ;verificar si seg=60
            
            BEQ incmin 
            BRA incseg
            
incmin		LDA #$0
			STA seg	
			LDA min
			DAA 
	        AND #$F
           	;paso a display 2
		    LDA seg
		    AND #$F0
		    NSA
		  ; paso a display 3
			INCA
			STA min
			CMPA #$60
			BEQ reset

          	BRA incseg
	

            	feed_watchdog	; macro que se expande para resetear el watchdog
	BRA    mainLoop

;***** rutina de segundo
delay       
                                       ; [5] viene del llamado a jsr 
		LDA #18			
		STA ciclo	
		;verificar si hay un boton presionado				   
vol		feed_watchdog			
		LDA #255               ; (2)  se escrbe el A
            	LDHX #255              ; (2)  se escribe el X
leep        	DBNZX leep             ; (3)
            	DBNZA leep             ; (3)
	
            	DEC ciclo
            	BNE vol
            	RTS		       ; [4]

;***** rutina de decodificaci√≥n
		STA PTBD 